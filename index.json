[{"content":"this is for setting up emacs in WSL2\n  in order to add a context menu to open windows files in WSL2, i created a python file with content below:\nimport sys import subprocess import os if __name__ == \u0026#34;__main__\u0026#34;: file_name = sys.argv[1] file_name = os.path.abspath(file_name) file_name = file_name.replace(\u0026#34;C:\\\\\u0026#34;, \u0026#34;/mnt/c/\u0026#34;) file_name = file_name.replace(\u0026#34;\\\\\u0026#34;, \u0026#34;/\u0026#34;) print(file_name) command = [ \u0026#34;C:/Windows/System32/wsl.exe\u0026#34;, \u0026#34;-d\u0026#34;, \u0026#34;Ubuntu\u0026#34;, \u0026#34;emacsclient\u0026#34;, \u0026#34;-n\u0026#34;, file_name, ] subprocess.Popen(command, shell=True)   then i setup the context menu by the following reg file:\n Windows Registry Editor Version 5.00\n[HKEY_CLASSES_ROOT\\*\\shell\\Open in WSL Emacs] @=\u0026ldquo;WSL Emacs\u0026rdquo; \u0026ldquo;icon\u0026rdquo;=\u0026quot;\\\u0026ldquo;C:\\\\Users\\\\MPNV38\\\\scoop\\\\apps\\\\emacs\\\\current\\\\share\\\\icons\\\\hicolor\\\\scalable\\\\apps\\\\emacs.ico\\\u0026rdquo;\u0026quot;\n[HKEY_CLASSES_ROOT\\*\\shell\\Open in WSL Emacs\\Command] @=\u0026quot;\\\u0026ldquo;C:\\\\Users\\\\MPNV38\\\\scoop\\\\apps\\\\python\\\\current\\\\pythonw.exe\\\u0026rdquo; \\\u0026ldquo;C:\\\\PortableApps\\\\MyTools\\\\wsl_emacs.py\\\u0026rdquo; \\\u0026quot;%1\\\u0026quot;\u0026quot;\n   This works fine on windows as long you have pythonw.exe and you have the icon file specified above exists\nby the method above, you may still have issue to bring the emacs window to focus, For that you can use the Python wingui32 package, see the implementation below:\nimport win32gui class WindowMgr: \u0026#34;\u0026#34;\u0026#34;Encapsulates some calls to the winapi for window management\u0026#34;\u0026#34;\u0026#34; def __init__(self): \u0026#34;\u0026#34;\u0026#34;Constructor\u0026#34;\u0026#34;\u0026#34; self._handle = None def find_window(self, class_name, window_name=None): \u0026#34;\u0026#34;\u0026#34;find a window by its class_name\u0026#34;\u0026#34;\u0026#34; self._handle = win32gui.FindWindow(class_name, window_name) def _window_enum_callback(self, hwnd, wildcard): \u0026#34;\u0026#34;\u0026#34;Pass to win32gui.EnumWindows() to check all the opened windows\u0026#34;\u0026#34;\u0026#34; if re.match(wildcard, str(win32gui.GetWindowText(hwnd))) is not None: self._handle = hwnd def find_window_wildcard(self, wildcard): \u0026#34;\u0026#34;\u0026#34;find a window whose title matches the wildcard regex\u0026#34;\u0026#34;\u0026#34; self._handle = None win32gui.EnumWindows(self._window_enum_callback, wildcard) def set_foreground(self): \u0026#34;\u0026#34;\u0026#34;put the window in the foreground\u0026#34;\u0026#34;\u0026#34; win32gui.SetForegroundWindow(self._handle) # at the end of your __main__ section, you can then bring the window back to focus with window #+name: if __name == \u0026#34;__main__\u0026#34;: # ... subprocess.Popen(command, shell=True) w = WindowMgr() w.find_window_wildcard(\u0026#34;.*Doom Emac\u0026#34;) w.set_foreground() ","permalink":"https://shelper.github.io/posts/setup-emacs-in-wsl2/","summary":"this is for setting up emacs in WSL2\n  in order to add a context menu to open windows files in WSL2, i created a python file with content below:\nimport sys import subprocess import os if __name__ == \u0026#34;__main__\u0026#34;: file_name = sys.argv[1] file_name = os.path.abspath(file_name) file_name = file_name.replace(\u0026#34;C:\\\\\u0026#34;, \u0026#34;/mnt/c/\u0026#34;) file_name = file_name.replace(\u0026#34;\\\\\u0026#34;, \u0026#34;/\u0026#34;) print(file_name) command = [ \u0026#34;C:/Windows/System32/wsl.exe\u0026#34;, \u0026#34;-d\u0026#34;, \u0026#34;Ubuntu\u0026#34;, \u0026#34;emacsclient\u0026#34;, \u0026#34;-n\u0026#34;, file_name, ] subprocess.Popen(command, shell=True)   then i setup the context menu by the following reg file:","title":"Emacs in WSL2"},{"content":"I followed this site for setting up hugo blogging on https://github.com/ using github.io, the instruction is little bit confusion, so just to clarify a little bit here.\n  the instructions there uses gh-pages branch to publish your site, this is done by the action peaceiris/actions-gh-pages@v3. however, for user/organization.github.io pages, the default branch for publishing is main. so if you use this action, you need to change your page branch to gh-pages and set the directory to /root.\n  if you are using project_name.github.io for a project, then github defaults to gh-pages branch so you dont need to do anything.\n  you dont need to use peaceiris/actions-gh-pages@v3 action if you setup your hugo build action appropriately.\n  also if you are using ox-hugo to publish your blog, and you are using subtree per blog post, then you need to have EXPORT_FILE_NAME property setted to the file name to be exported as .md file and you cannot have links in the headlines of the subtree to be exported. otherwise, it will cause error of \u0026ldquo;org-find-olp: Heading not found on level \u0026hellip;\u0026rdquo;\n","permalink":"https://shelper.github.io/posts/setup-hugo-with-github-pages/","summary":"I followed this site for setting up hugo blogging on https://github.com/ using github.io, the instruction is little bit confusion, so just to clarify a little bit here.\n  the instructions there uses gh-pages branch to publish your site, this is done by the action peaceiris/actions-gh-pages@v3. however, for user/organization.github.io pages, the default branch for publishing is main. so if you use this action, you need to change your page branch to gh-pages and set the directory to /root.","title":"setup hugo with github pages on github"},{"content":"So ccls is a lsp wrapper for clang it works as a backend that indexes source code and gives emacs index information for better navigation and refactoring of c++\nI have had a few issues with the tool\u0026rsquo;s setup in emacs enviroment. and found the following things that may need extra attention\n .ccls file, this file basically does two things   tell ccls how to index the file using clang before index the file tell clang how to compile and interpret the code as there is a mixture of options for ccls and arguments for clang, need to pay extra attention  usually lines in .ccls file start with % is for ccls, and lines start with - is for clang\n c and c++ code/mode, it is better to set only for c++ as c++ is a super set of c\n  company completion of header files should work without input the surrounds of header file e.g, \u0026quot;\u0026quot; or \u0026lt;\u0026gt;\n  some times ccls complains it cannot find header file, so you may include the root path of the header files by adding -IincludePath to .ccls files\n  for large projects using compile_commands.json to guide cclsindexing. you may of course set partial folder for index by setting the black list ow white list if indexing is way too slow\n  setting key bindings in emacs, the priority is: local-settings \u0026gt; global-settings \u0026gt; define-key\n  ","permalink":"https://shelper.github.io/posts/setup-emacs-for-c++-with-ccls-and-lsp/","summary":"So ccls is a lsp wrapper for clang it works as a backend that indexes source code and gives emacs index information for better navigation and refactoring of c++\nI have had a few issues with the tool\u0026rsquo;s setup in emacs enviroment. and found the following things that may need extra attention\n .ccls file, this file basically does two things   tell ccls how to index the file using clang before index the file tell clang how to compile and interpret the code as there is a mixture of options for ccls and arguments for clang, need to pay extra attention  usually lines in .","title":"setup emacs foc C++ with ccls and lsp"},{"content":"first need to setup the orgmode plugin for nikola refer to here, then put this into init.el\n;;; set up new nikola new post directly in emacs ;; does not work on windows (defun publish-blog-post () \u0026#34;nikola github-deploy\u0026#34; (interactive) (save-buffer) (let ((my-blog-repo \u0026#34;path to your blog repo\u0026#34;))) ;; (let (my-blog-repo)) ;; (setq my-blog-repo \u0026#34;~/shelper.github.io\u0026#34;) (cd my-blog-repo) (shell-command \u0026#34;nikola github_deploy\u0026#34;)) (defun new-blog-post (title) \u0026#34;new blog post to shelper.github.io\u0026#34; (interactive \u0026#34;sEnter post title: \u0026#34;) (let ((my-blog-repo \u0026#34;path to your blog repo\u0026#34;))) (cd my-blog-repo) (setq new-post-cmd (concat \u0026#34;nikola new_post -f orgmode -t \u0026#34; \u0026#34;\\\u0026#34;\u0026#34; title \u0026#34;\\\u0026#34;\u0026#34;)) (shell-command new-post-cmd) (setq new-post-file (concat my-blog-repo \u0026#34;/posts/\u0026#34; (replace-regexp-in-string \u0026#34; \u0026#34; \u0026#34;-\u0026#34; title) \u0026#34;.org\u0026#34;)) (find-file new-post-file)) however, it seems mac does not work for org in nikola refer to: here\n","permalink":"https://shelper.github.io/posts/orgmode-for-nikola-post/","summary":"first need to setup the orgmode plugin for nikola refer to here, then put this into init.el\n;;; set up new nikola new post directly in emacs ;; does not work on windows (defun publish-blog-post () \u0026#34;nikola github-deploy\u0026#34; (interactive) (save-buffer) (let ((my-blog-repo \u0026#34;path to your blog repo\u0026#34;))) ;; (let (my-blog-repo)) ;; (setq my-blog-repo \u0026#34;~/shelper.github.io\u0026#34;) (cd my-blog-repo) (shell-command \u0026#34;nikola github_deploy\u0026#34;)) (defun new-blog-post (title) \u0026#34;new blog post to shelper.github.io\u0026#34; (interactive \u0026#34;sEnter post title: \u0026#34;) (let ((my-blog-repo \u0026#34;path to your blog repo\u0026#34;))) (cd my-blog-repo) (setq new-post-cmd (concat \u0026#34;nikola new_post -f orgmode -t \u0026#34; \u0026#34;\\\u0026#34;\u0026#34; title \u0026#34;\\\u0026#34;\u0026#34;)) (shell-command new-post-cmd) (setq new-post-file (concat my-blog-repo \u0026#34;/posts/\u0026#34; (replace-regexp-in-string \u0026#34; \u0026#34; \u0026#34;-\u0026#34; title) \u0026#34;.","title":"Orgmode for nikola post"},{"content":" use jupyterlab use interact for interactive widget use qgrid for better dataframe display within ipython notebook, follow instructions here %load_ext sql for sql query within the notebook, refer to here  ","permalink":"https://shelper.github.io/posts/jupyter-skills-and-tricks/","summary":" use jupyterlab use interact for interactive widget use qgrid for better dataframe display within ipython notebook, follow instructions here %load_ext sql for sql query within the notebook, refer to here  ","title":"Jupyter skills and tricks"},{"content":"A few things to setup the IPython and Jupyter for a best practise.\nIPython configuration Change ~/.ipython/profile_default/startup/init.ipy for their usage respectively\n To enable versioning of the python/jupyter environment, you need to pip install version_information and then add below, afterward for each IPython notebook file I put %version_information numpy, scipy, matplotlib, pandas to display my python environment version information  %load_ext version_information  To enable autoloading of modified modules in IPython, add below  %load_ext version_information %load_ext autoreload %autoreload 2  I also added the lines below just because I use them everytime I open IPython  import numpy as np import matplotlib.pyplot as plt plt.ion() Modify Jupyter notebook settings:  To enable auto conversion and saving of .py and .html files from the notebook, put the following script to your Jupyter configuration: ~/.jupyter/jupyter_notebook_config.py, more details can be found at here  # make a script equivalent whenever the notebook is saved import io import os from notebook.utils import to_api_path _script_exporter = None _html_exporter = None def script_post_save(model, os_path, contents_manager, **kwargs): \u0026#34;\u0026#34;\u0026#34;convert notebooks to Python script after save with nbconvert replaces `ipython notebook --script` \u0026#34;\u0026#34;\u0026#34; from nbconvert.exporters.script import ScriptExporter from nbconvert.exporters.html import HTMLExporter if model[\u0026#39;type\u0026#39;] != \u0026#39;notebook\u0026#39;: return global _script_exporter if _script_exporter is None: _script_exporter = ScriptExporter(parent=contents_manager) log = contents_manager.log base, ext = os.path.splitext(os_path) # py_fname = base + \u0026#39;.py\u0026#39; script, resources = _script_exporter.from_filename(os_path) script_fname = base + resources.get(\u0026#39;output_extension\u0026#39;, \u0026#39;.txt\u0026#39;) log.info(\u0026#34;Saving script /%s\u0026#34;, to_api_path(script_fname, contents_manager.root_dir)) with io.open(script_fname, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(script) global _html_exporter if _html_exporter is None: _html_exporter = HTMLExporter(parent=contents_manager) html, resources = _html_exporter.from_filename(os_path) html_fname = base + resources.get(\u0026#39;output_extension\u0026#39;, \u0026#39;.txt\u0026#39;) log.info(\u0026#34;Saving html /%s\u0026#34;, to_api_path(html_fname, contents_manager.root_dir)) with io.open(html_fname, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(html) c.FileContentsManager.post_save_hook = script_post_save For better visualization and vim keybindings  Jupyter theme can be added following here, I prefer to use onedork with different fonts for text and code blocks, so basically want you can do is  pip install --upgrade jupyterthemes jt -t onedork -tf georgiaserif -nf droidsans -vim ","permalink":"https://shelper.github.io/posts/best-practise-for-jupyter-and-ipython/","summary":"A few things to setup the IPython and Jupyter for a best practise.\nIPython configuration Change ~/.ipython/profile_default/startup/init.ipy for their usage respectively\n To enable versioning of the python/jupyter environment, you need to pip install version_information and then add below, afterward for each IPython notebook file I put %version_information numpy, scipy, matplotlib, pandas to display my python environment version information  %load_ext version_information  To enable autoloading of modified modules in IPython, add below  %load_ext version_information %load_ext autoreload %autoreload 2  I also added the lines below just because I use them everytime I open IPython  import numpy as np import matplotlib.","title":"best practice for jupyter and ipython"},{"content":"so there is a post described using key chord for fast buffer switching between most recent two buffers. it works for most cases, but if you are using org babel mode and editing source code in the *org src .* buffer, then this *org src .* buffer cannot be accessed by the method described here.\nso I made another function to solve this issue, and here it is:\n(defun get-next-buffer () (interactive) (if (string= (car (helm-buffer-list)) \u0026#34; *Minibuf-1*\u0026#34;) (switch-to-buffer (car (cdr (helm-buffer-list)))) (switch-to-buffer (car (helm-buffer-list))))) (key-chord-define-global \u0026#34;jk\u0026#34; \u0026#39;get-next-buffer) strangely when switching buffer using `helm-buffer-lists`, and if you exit without selecting any buffer, you gets `*Minibuf-1*` into the buffer list and will switch to minibuffer.so here I compared the first buffer name in the list to `*Minibuf-1*` and remove it if it is for `Minibuf-1`\nin addition i added the function and key binding below to enable:\n always change to normal mode when switch-to-buffer always move to the end of buffer for comint-mode and eshell mode  the code is here:\n;; goto buffer end and use insert mode if switch to a shell or comint mode (defvar last-buffer nil) (defun post-switch-buffer-func () (if (not (eq (current-buffer) last-buffer)) (progn (setq last-buffer (current-buffer)) (if (derived-mode-p \u0026#39;eshell-mode \u0026#39;comint-mode) (progn ;; (evil-insert-state) ;uncomment for insert mode when switched to (end-of-buffer))) (if (derived-mode-p \u0026#39;prog-mode) (evil-normal-state))))) (add-hook \u0026#39;post-command-hook \u0026#39;post-switch-buffer-func) ","permalink":"https://shelper.github.io/posts/switch-recent-two-buffer-alterantively/","summary":"so there is a post described using key chord for fast buffer switching between most recent two buffers. it works for most cases, but if you are using org babel mode and editing source code in the *org src .* buffer, then this *org src .* buffer cannot be accessed by the method described here.\nso I made another function to solve this issue, and here it is:\n(defun get-next-buffer () (interactive) (if (string= (car (helm-buffer-list)) \u0026#34; *Minibuf-1*\u0026#34;) (switch-to-buffer (car (cdr (helm-buffer-list)))) (switch-to-buffer (car (helm-buffer-list))))) (key-chord-define-global \u0026#34;jk\u0026#34; \u0026#39;get-next-buffer) strangely when switching buffer using `helm-buffer-lists`, and if you exit without selecting any buffer, you gets `*Minibuf-1*` into the buffer list and will switch to minibuffer.","title":"switch recent two buffer alternatively"},{"content":"using Nikola with Travis CI on github.io pages major reference here\nit is noticeable that instead of running\ntravis login travis enable travis encrypt-file id_rsa --add we should run\ntravis login travis encrypt-file id_rsa --add travis enable ","permalink":"https://shelper.github.io/posts/using-travis-ci-for-github-repo/","summary":"using Nikola with Travis CI on github.io pages major reference here\nit is noticeable that instead of running\ntravis login travis enable travis encrypt-file id_rsa --add we should run\ntravis login travis encrypt-file id_rsa --add travis enable ","title":"using travis CI for github repo"},{"content":"to use nikola you need to install it with some other packages as well pip instal nikola markdown ws4py watchdog\nthen to enable markdown, you need to change the conf.py variable POSTS and PAGES\nPOSTS = ( (\u0026#34;posts/*.md\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), (\u0026#34;posts/*.rst\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), (\u0026#34;posts/*.txt\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), (\u0026#34;posts/*.html\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), ) PAGES = ( (\u0026#34;pages/*.md\u0026#34;, \u0026#34;pages\u0026#34;, \u0026#34;story.tmpl\u0026#34;), (\u0026#34;pages/*.rst\u0026#34;, \u0026#34;pages\u0026#34;, \u0026#34;story.tmpl\u0026#34;), (\u0026#34;pages/*.txt\u0026#34;, \u0026#34;pages\u0026#34;, \u0026#34;story.tmpl\u0026#34;), (\u0026#34;pages/*.html\u0026#34;, \u0026#34;pages\u0026#34;, \u0026#34;story.tmpl\u0026#34;), ) you may also need to change the github settings for easy github deploy\nThen new post can be added using markdown format by nikola new_post -f markdown\n","permalink":"https://shelper.github.io/posts/set-up-nikola-for-markdown/","summary":"to use nikola you need to install it with some other packages as well pip instal nikola markdown ws4py watchdog\nthen to enable markdown, you need to change the conf.py variable POSTS and PAGES\nPOSTS = ( (\u0026#34;posts/*.md\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), (\u0026#34;posts/*.rst\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), (\u0026#34;posts/*.txt\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), (\u0026#34;posts/*.html\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), ) PAGES = ( (\u0026#34;pages/*.md\u0026#34;, \u0026#34;pages\u0026#34;, \u0026#34;story.tmpl\u0026#34;), (\u0026#34;pages/*.rst\u0026#34;, \u0026#34;pages\u0026#34;, \u0026#34;story.tmpl\u0026#34;), (\u0026#34;pages/*.txt\u0026#34;, \u0026#34;pages\u0026#34;, \u0026#34;story.tmpl\u0026#34;), (\u0026#34;pages/*.html\u0026#34;, \u0026#34;pages\u0026#34;, \u0026#34;story.tmpl\u0026#34;), ) you may also need to change the github settings for easy github deploy","title":"set up nikola for markdown"},{"content":"steps are:\n  install cookiecutter: python -m pip install cookiecutter\n  run cookiecutter to initiate a project: cookiecutter('https://github.com/audreyr/cookiecutter-pypackage.git') under the project folder\n  on github, start a new repo python_prj\n  run git init in the local project folder and commit\n  run git remote add origin git@github.com:username/projectname.git\n using git@git requires to setup the ssh key pair, this can be found by easily google it or under FAQ of github    run git push -u origin master\n  that is it, enjoy.\nif you use pycharm it will add a folder called .idea under the root folder, this should also add to git repor if needed.\n","permalink":"https://shelper.github.io/posts/how-to-start-python-project-on-github/","summary":"steps are:\n  install cookiecutter: python -m pip install cookiecutter\n  run cookiecutter to initiate a project: cookiecutter('https://github.com/audreyr/cookiecutter-pypackage.git') under the project folder\n  on github, start a new repo python_prj\n  run git init in the local project folder and commit\n  run git remote add origin git@github.com:username/projectname.git\n using git@git requires to setup the ssh key pair, this can be found by easily google it or under FAQ of github    run git push -u origin master","title":"how to start python project on github"},{"content":"quote for symbols: (setq symbol) ;; is equivelent to (set \u0026#39;symbol) the quote means; keep as it is, dont try to evaluate, so if no quote, the lisp processor will try to evaluate it, means the symbol (or the first element of the list) has to be evaluatable as either a function, or a defined variable\nlet vs. let*: (setq y 2) (let ((y 1) (z y)) (list y z)) ⇒ (1 2) (setq y 2) (let* ((y 1) (z y)) (list y z)) ⇒ (1 1) let* binds 1 to y immediately, while let evaluate old y as 2, then list binds 1 to the new y and pring it out\ncolon : and #: : is used for constant symboles, it is commonly used as attributes for faces # with quote, i.e., #' is equal to ', the only difference is with #, it provides compiling information once the code is compiled.\nTO BE CONTINUED\n","permalink":"https://shelper.github.io/posts/elisp-notes/","summary":"quote for symbols: (setq symbol) ;; is equivelent to (set \u0026#39;symbol) the quote means; keep as it is, dont try to evaluate, so if no quote, the lisp processor will try to evaluate it, means the symbol (or the first element of the list) has to be evaluatable as either a function, or a defined variable\nlet vs. let*: (setq y 2) (let ((y 1) (z y)) (list y z)) ⇒ (1 2) (setq y 2) (let* ((y 1) (z y)) (list y z)) ⇒ (1 1) let* binds 1 to y immediately, while let evaluate old y as 2, then list binds 1 to the new y and pring it out","title":"elisp notes"},{"content":"so i was trying to use matplotlib for fast image ploting and updating, and I found a post here. the matplotlib uses different backend to render the images, and due to the differences between different backend, some functions are only available for specific backend, for instance, the fig.canvas.update() is a fast way to render new images to the axes, but is only availabe to PyQt4.\nso i was trying to install pyqt4 using homebrew, it failed by saying the osx version is pre-released version and is not supported, and arises 2 errors during make process.\nthis is due to the cached info for homebrew is not up-to-date, so you need to run brew update.\nhowever, this also arises an error of \u0026ldquo;not writable directory: /usr/local, so you need to sudo chown - $user:admin /usr/local, then update shall work, then run brew install pyqt (add --with-python3 if need to support python3.x).\nnow the remaining problem is the pyqt package cannot be imported in python shell because homebrew gives the below message:\n Python modules have been installed and Homebrew\u0026rsquo;s site-packages is not in your Python sys.path, so you will not be able to import the modules this formula installed. If you plan to develop with these modules, please run: echo \u0026lsquo;import site; site.addsitedir(\u0026quot;/usr/local/lib/python2.7/site-packages\u0026rdquo;)\u0026rsquo; \u0026raquo; /path/to/your/python/folder/site-packages/homebrew.pth\n you may run import site; site.getsitepackages() to find out the path to your python site-packages folder, of course, you need to change python2.7 to python3.x for python3 support.\nAnother thing is use python3 -m pip instead of pip so to ensure the package will be installed in the default site-packages folder, actually python3 -m pip install pyside successfully installed pyside for python3\nhowever, i found pyside 1.2.4 does not work due to the @rpath issue, cannot find a solution for it. so i installed pyside 1.2.2 and downloaded [https://raw.githubusercontent.com/PySide/pyside-setup/1.2.2/pyside_postinstall.py], after running this script, the pyside is succesfully installed and can be imported\n","permalink":"https://shelper.github.io/posts/install-pyqt-on-mac-for-matplotlib/","summary":"so i was trying to use matplotlib for fast image ploting and updating, and I found a post here. the matplotlib uses different backend to render the images, and due to the differences between different backend, some functions are only available for specific backend, for instance, the fig.canvas.update() is a fast way to render new images to the axes, but is only availabe to PyQt4.\nso i was trying to install pyqt4 using homebrew, it failed by saying the osx version is pre-released version and is not supported, and arises 2 errors during make process.","title":"install pyqt on mac for matplotlib"},{"content":"using different backends for matplotlib might cause some unexpected issues: today, i am trying to run a program that uses the following function:\nplt.figure() figManager = plt.get_current_fig_manager() figManager.window.showMaximized() however, i found when using the backend of Tk, it gives error, saying get_current_fig_manager is not available, so when i switch to qt4egg, everything works well.\nhow to switch the backend for matplotlib? first find the configure directory for matplotlib on your computer\nimport matplotlib as plt plt.get_configdir() then find/generate a file named matplotlibrc, add line:\nbackend : qt4agg reference here\nanother issue with using qt4 as backend is below from stackoverflow I was trying to use matplotlib to replot an image in a faster way, so instead of replotting everything, I use set_data method of the AxesImage class as below:\nimport numpy as np import time import matplotlib.pyplot as plt fig, ax = plt.subplots() img = plt.imshow(np.random.rand(100, 100)) img.set_data(np.random.rand(100, 100)) ax.draw_artist(ax.patch) ax.draw_artist(img) fig.canvas.update() fig.canvas.flush_events() I encountered this error:\n Traceback (most recent call last): \u0026hellip; ax.draw_artist(ax.patch) File \u0026ldquo;/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages/matplotlib/axes/_base.py\u0026rdquo;, line 2319, in draw_artist raise AttributeError(msg) AttributeError: draw_artist can only be used after an initial draw which caches the render\n However, if I run the script line by line in python shell (IPython), it works and nothing is wrong. So what is the mystery behind this cached renderer?\nEDIT: add a line fig.canvas.draw() solves the problem, now the remaining question is why running it line by line in IPython shell does not cause the same error?\n","permalink":"https://shelper.github.io/posts/matplotlib-backend-issue/","summary":"using different backends for matplotlib might cause some unexpected issues: today, i am trying to run a program that uses the following function:\nplt.figure() figManager = plt.get_current_fig_manager() figManager.window.showMaximized() however, i found when using the backend of Tk, it gives error, saying get_current_fig_manager is not available, so when i switch to qt4egg, everything works well.\nhow to switch the backend for matplotlib? first find the configure directory for matplotlib on your computer","title":"matplotlib backend issue"},{"content":"several things:\n when using setuptools.find_packages, only packages with __init__.py in its folder will be found only modules imported in the __init__.py will be indexed, means the modules will be added into the dir(module) and accessable by .module_name for python 3, if one modules(py file) in the same folder of another module and relies on that module, you need to put from . import module at the top package name is specified in the setup.py, while the module name can be different from the package name. e.g. if you have a structure package/setup.py and package/module/__init__.py, and in setup.py you set package name to be package then after you install that, you import module rather than import package, it is better to keep the package and module name the same. try to use template with cookiecutter to make your life easier, and at the same time, modify the __init__.py when needed exclude the test using packages=setuptools.find_packages(exclude=[\u0026quot;*.tests\u0026quot;, \u0026quot;*.tests.*\u0026quot;, \u0026quot;tests.*\u0026quot;, \u0026quot;tests\u0026quot;]) to include upper level modules, e.g., dir1/dir2/module2.py wants to include dir1/module1.py, do from import module1  then use python setup.py sdist to generate the zip and egg file and then use python setup.py install to install the package\n","permalink":"https://shelper.github.io/posts/python-module-and-packaging/","summary":"several things:\n when using setuptools.find_packages, only packages with __init__.py in its folder will be found only modules imported in the __init__.py will be indexed, means the modules will be added into the dir(module) and accessable by .module_name for python 3, if one modules(py file) in the same folder of another module and relies on that module, you need to put from . import module at the top package name is specified in the setup.","title":"python module and packaging"},{"content":"so I am trying to use ipython as my python shell under emacs, since i started using python in emacs, i always encounter different issues, again and again, so i will use this post as a collection of issues and solutions.\nissue1:\nipython shell imports quite some packages/modules/functions and as you may know, import searches current folder as well as the subfolders of the registered module, if there are file with the same name under the current folder, it overrides the file in the registered module, apparently, this causes problems of \u0026ldquo;import error, could not find \u0026hellip;\u0026rdquo;\nso,watch out how you name your files, and if it does happen, consider to rename or remove the files\nissue2:\npip install, i once encountered that pip keeps reinstall packages, without aware of the package is already installed. the issue is in the pip config file (usually in ~/pip/pip.ini) i have following line\nignore-installed = true apparently, that is what this for, so remove this line solves the problem\nissue3:\nhow to setup proxy when you are behind a corporation firewall? goto the config file again, and put\n[global]\rproxy = url:port this works for many other python based packages/software as well\nissue4\nwhen using emacs, calling git using shell-command seems not working well, you might want to use magit instead.\nPS: I will keep updating this post if I find new issues and solutions.\n","permalink":"https://shelper.github.io/posts/ipython-and-pip-issues/","summary":"so I am trying to use ipython as my python shell under emacs, since i started using python in emacs, i always encounter different issues, again and again, so i will use this post as a collection of issues and solutions.\nissue1:\nipython shell imports quite some packages/modules/functions and as you may know, import searches current folder as well as the subfolders of the registered module, if there are file with the same name under the current folder, it overrides the file in the registered module, apparently, this causes problems of \u0026ldquo;import error, could not find \u0026hellip;\u0026rdquo;","title":"ipython and pip issues"},{"content":"  remove %HOME% (you can put it back later)\n  download and install babun\n  setup ssh, if you already have ssh keys in the ~/.ssh, copy to the ~ of babun shell and do\n  eval `ssh-agent -s`\rssh-add if not, copy the ssh pub and private keys to ~/.ssh or use\nssh-add path/to/keys if you are using proxy behind firewall you need: add proxy for babun and change the user -agent (dont know why, but works)  export http_proxy=http://gateway.zscaler.net:80\rexport https_proxy=$http_proxy\rexport ftp_proxy=$http_proxy\rexport no_proxy=localhost\r...\rexport USER_AGENT=\u0026#34;Chrome/47.0.2526.111\u0026#34; then you can use pact to install packages\n\rpact install connect-proxy if ssh need to go through proxy, add the line below to the ~/.ssh/config file\n\rProxyCommand connect-proxy.exe -H gateway.zscaler.net:80 %h %p then add the lines below to .gitconfig\n\r[http]\rproxy = http://gateway.zscaler.net:80 However, this still cannot work for run git push etc., in emacs shellNo solution yet, a question of this is asked at stackoverflow\n","permalink":"https://shelper.github.io/posts/setup-babun-on-windows-for-git-and-ssh/","summary":"remove %HOME% (you can put it back later)\n  download and install babun\n  setup ssh, if you already have ssh keys in the ~/.ssh, copy to the ~ of babun shell and do\n  eval `ssh-agent -s`\rssh-add if not, copy the ssh pub and private keys to ~/.ssh or use\nssh-add path/to/keys if you are using proxy behind firewall you need: add proxy for babun and change the user -agent (dont know why, but works)  export http_proxy=http://gateway.","title":"setup babun on windows for git and ssh"},{"content":"I have beening thinking of building such a framework for a while, I started a little project called pypeline. The code on github is not up-to-date. And I have some new thoughts on the framework design. So this article serves as a design documents and welcomes any comments or suggestions.\nBased on my own experience, I often want to process some data or image at multiple stage. Often, I want to change some parameters of certian algorithm to see how the outcomes are changed. It becomes cumbersome and difficult to check after saving a lot of intermedia data, with file names like para1_value1_para1_value2....\nI then thought about it, and decide to write a framework like a pipeline. for a multi-step process, I can connect the processing function of each step and form a pipeline. I decided to use async module in python and if needed, use a generate as the input, so if I want to check the outcome of a multi-step process, I can simply write a generate to feed in the input repeatedly, and with the async feature, I can change the parameters in realtime, and the outcome will change instantaneously or even real time as well.\nthen the next thing is to make this pipeline easier to use, e.g., I used decorator to claim funtions that can be inserted into the pipeline by a single line of code. I made a pipeline class with implementations of pop() and insert() for adding and removing functions in the pipeline I also plan to add input and output check for each functions, so that when I connect two functions, the framework will check if the output of the first matches the input of the second. I am thinking of using a separate file like the header file in c/c++ to describe the input and output of each function.\nfor instance, I have two functions to connect:\n# functions.py def f1(x, y): return x + y, x - y def f2(a, b): return a + b and x, y, a, b are all integers,\nso I can have a separate file with same name but different extension:\n# functions.dsc\rf1 = {\u0026#39;input\u0026#39;: [int, int], \u0026#39;output\u0026#39;: [int, int]}\rf2 = {\u0026#39;input\u0026#39;: [int, int], \u0026#39;output\u0026#39;: [int]} then when connect these two functions I can do:\n# pseudo code:\rif f1[\u0026#39;output\u0026#39;] == f2[\u0026#39;input\u0026#39;]:\rconnect f1 and f2\relse:\rraise FuncInputOutputMismatch() for more complicated cases, the pipeline might have branches and inter-connections within branches. it of course should be one way data flow. it further reminds me the frontend library from facebook that uses one way data flow: the React. There is also a video on this.\nthen I did some research and found something called hot loading it also reminds me the talk given by Bret Victor. it would be such a fantastic tool if some tool like this can be used for scientific data processing\u0026hellip;\nSo I just wonder if there is already something similar or at least some that i can borrow code/ideas from? or is this kind of design idea new? i tend to think it is not, I would like to read more to get a better understanding of such design before i go ahead coding the framework.\n","permalink":"https://shelper.github.io/posts/design-of-a-framework-for-scientific-data-processing/","summary":"I have beening thinking of building such a framework for a while, I started a little project called pypeline. The code on github is not up-to-date. And I have some new thoughts on the framework design. So this article serves as a design documents and welcomes any comments or suggestions.\nBased on my own experience, I often want to process some data or image at multiple stage. Often, I want to change some parameters of certian algorithm to see how the outcomes are changed.","title":"design of a framework for scientific data processing"},{"content":"It is quite often that sometimes you just could not stop yourself doing something. for instance, I often sit in chair and do not want to go the bathroom until i could not hold it any more\u0026hellip; that happens especially when i try to solve a problem, resolving a program bug\u0026hellip;\nso, how can we change this? use the sword of wisdom! the sword of wisdom, is a keen and sharp mind state that can penetrate in to your mind stream. it breaks your flow of thinking, like a sharp knife.\nhow? because the sword of wisdom uses the wisdom of emptiness. the wisdom of emptiness breaks your attachment to almost anything. so, it not only works for letting you move your butt of the chair, it also cuts off your desire of wanting something, and offer you the power to get away for desire without being obsessed by it.\nit is sharper than anything in the world in the aspect of cutting of your attachment. everyone can use it, as long you calm down, relax, accept and surrender to your surroundings, including people, events, and happenings, completely, and put it down, by any chance, you will discover the wisdom of emptyness, you let it flows into your mind, and it will take you away from any strong desire or will.\nIt is literally a sword, that you can use all the time, although it has no form.\n","permalink":"https://shelper.github.io/posts/the-sword-of-wisdom/","summary":"It is quite often that sometimes you just could not stop yourself doing something. for instance, I often sit in chair and do not want to go the bathroom until i could not hold it any more\u0026hellip; that happens especially when i try to solve a problem, resolving a program bug\u0026hellip;\nso, how can we change this? use the sword of wisdom! the sword of wisdom, is a keen and sharp mind state that can penetrate in to your mind stream.","title":"the sword of wisdom"},{"content":"so it is a long story, to make it short, here is how it works step by step:\n install nikola using pip install nikola markdown webassets init nikola site by nikola init --quiet folder_name change the configurations of the default to your configurations just like below diff file shows:  --- default conf.py +++ customized conf.py @@ -17,16 +17,16 @@ import time  # Data about this site -BLOG_AUTHOR = \u0026#34;Your Name\u0026#34; # (translatable) -BLOG_TITLE = \u0026#34;Demo Site\u0026#34; # (translatable) +BLOG_AUTHOR = \u0026#34;Shelper\u0026#34; # (translatable) +BLOG_TITLE = \u0026#34;The Way As It Is\u0026#34; # (translatable) # This is the main URL for your site. It will be used # in a prominent link. Don\u0026#39;t forget the protocol (http/https)! -SITE_URL = \u0026#34;https://example.com/\u0026#34; +SITE_URL = \u0026#34;http://shelper.github.io/\u0026#34; # This is the URL where Nikola\u0026#39;s output will be deployed. # If not set, defaults to SITE_URL # BASE_URL = \u0026#34;https://example.com/\u0026#34; -BLOG_EMAIL = \u0026#34;joe@demo.site\u0026#34; -BLOG_DESCRIPTION = \u0026#34;This is a demo site for Nikola.\u0026#34; # (translatable) +BLOG_EMAIL = \u0026#34;shelper@github\u0026#34; +BLOG_DESCRIPTION = \u0026#34;A Site for Meaningful Things\u0026#34; # (translatable)  # Nikola is multilingual! # @@ -171,11 +171,13 @@ POSTS = (  (\u0026#34;posts/*.rst\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), (\u0026#34;posts/*.txt\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), (\u0026#34;posts/*.html\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), + (\u0026#34;posts/*.md\u0026#34;, \u0026#34;posts\u0026#34;, \u0026#34;post.tmpl\u0026#34;), ) PAGES = ( (\u0026#34;stories/*.rst\u0026#34;, \u0026#34;stories\u0026#34;, \u0026#34;story.tmpl\u0026#34;), (\u0026#34;stories/*.txt\u0026#34;, \u0026#34;stories\u0026#34;, \u0026#34;story.tmpl\u0026#34;), (\u0026#34;stories/*.html\u0026#34;, \u0026#34;stories\u0026#34;, \u0026#34;story.tmpl\u0026#34;), + (\u0026#34;stories/*.md\u0026#34;, \u0026#34;stories\u0026#34;, \u0026#34;story.tmpl\u0026#34;), ) @@ -546,11 +548,11 @@ REDIRECTIONS = [] # https://getnikola.com/handbook.html#deploying-to-github # For user.github.io OR organization.github.io pages, the DEPLOY branch # MUST be \u0026#39;master\u0026#39;, and \u0026#39;gh-pages\u0026#39; for other repositories. -# GITHUB_SOURCE_BRANCH = \u0026#39;master\u0026#39; -# GITHUB_DEPLOY_BRANCH = \u0026#39;gh-pages\u0026#39; +GITHUB_SOURCE_BRANCH = \u0026#39;source\u0026#39; +GITHUB_DEPLOY_BRANCH = \u0026#39;master\u0026#39;  # The name of the remote where you wish to push to, using github_deploy. -# GITHUB_REMOTE_NAME = \u0026#39;origin\u0026#39; +GITHUB_REMOTE_NAME = \u0026#39;origin\u0026#39;  # Whether or not github_deploy should commit to the source branch automatically # before deploying. @@ -829,7 +831,7 @@ COMMENT_SYSTEM = \u0026#34;disqus\u0026#34; # depends on what comment system you use. The default is # \u0026#34;nikolademo\u0026#34; which is a test account for Disqus. More information # is in the manual. -COMMENT_SYSTEM_ID = \u0026#34;nikolademo\u0026#34; +COMMENT_SYSTEM_ID = \u0026#34;shelper\u0026#34;  # Enable annotations using annotateit.org? # If set to False, you can still enable them for individual posts and pages  follow nikola handbook on how to use github pages deploy to github setup emacs to edit your post and here is my functions:  (setq my-blog-repo \u0026#34;~/develop/shelper.github.io\u0026#34;) (defun my-new-blog-post (title) \u0026#34;new blog post to shelper.github.io\u0026#34; (interactive \u0026#34;sEnter post title: \u0026#34;) (cd my-blog-repo) (setq new-post-cmd (concat \u0026#34;nikola new_post -f markdown -t \u0026#34; \u0026#34;\\\u0026#34;\u0026#34; title \u0026#34;\\\u0026#34;\u0026#34;)) (shell-command new-post-cmd) (setq new-post-file (concat my-blog-repo \u0026#34;/posts/\u0026#34; (replace-regexp-in-string \u0026#34; \u0026#34; \u0026#34;-\u0026#34; title) \u0026#34;.md\u0026#34;)) (find-file new-post-file)) (global-set-key (kbd \u0026#34;C-c C-p\u0026#34;) \u0026#39;my-new-blog-post)  realtime .md file html preview using flymd, I setup the flymd as below:  ;;; realtime markdown rendering (defun my-flymd-browser-function (url) (if (string-equal system-type \u0026#34;windows-nt\u0026#34;) (setq url (concat \u0026#34;file:/\u0026#34; url))) (if (string-equal system-type \u0026#34;darwin\u0026#34;) (let ((process-environment (browse-url-process-environment))) (apply \u0026#39;start-process (concat \u0026#34;firefox \u0026#34; url) nil \u0026#34;/usr/bin/open\u0026#34; (list \u0026#34;-a\u0026#34; \u0026#34;firefox\u0026#34; url))) (let ((browse-url-browser-function \u0026#39;browse-url-firefox)) (browse-url url)))) (setq flymd-browser-open-function \u0026#39;my-flymd-browser-function) (add-hook \u0026#39;markdown-mode-hook \u0026#39;flymd-flyit) another thing that needs your attention is that you cannot indent code blocks, so code blocks have to start with no heading spaces or TABs\n","permalink":"https://shelper.github.io/posts/using-emacs-for-blog-post-using-nikola-and-github-pages/","summary":"so it is a long story, to make it short, here is how it works step by step:\n install nikola using pip install nikola markdown webassets init nikola site by nikola init --quiet folder_name change the configurations of the default to your configurations just like below diff file shows:  --- default conf.py +++ customized conf.py @@ -17,16 +17,16 @@ import time  # Data about this site -BLOG_AUTHOR = \u0026#34;Your Name\u0026#34; # (translatable) -BLOG_TITLE = \u0026#34;Demo Site\u0026#34; # (translatable) +BLOG_AUTHOR = \u0026#34;Shelper\u0026#34; # (translatable) +BLOG_TITLE = \u0026#34;The Way As It Is\u0026#34; # (translatable) # This is the main URL for your site.","title":"using emacs for blog post using nikola and github pages"},{"content":"Relax, means putting down, pushing away, forgetting things. Relax, is not about picking up something called \u0026ldquo;relaxation\u0026rdquo;\nRelax is simply let it go, if you can, you should also let it go the thought of \u0026ldquo;let it go\u0026rdquo;\nif you cannot do that, then reciting \u0026ldquo;let it go\u0026rdquo; helps you to push away other wondering thoughts, especially those thoughts bothering you, and make yourself agitated.\nso relax, is very simple that really don\u0026rsquo;t need you to do anything, yet very difficult, if you try to grab something.\nso learn to enjoy relaxation, it is very important and extremely benificial\n","permalink":"https://shelper.github.io/posts/how-to-truly-relax-yourself/","summary":"Relax, means putting down, pushing away, forgetting things. Relax, is not about picking up something called \u0026ldquo;relaxation\u0026rdquo;\nRelax is simply let it go, if you can, you should also let it go the thought of \u0026ldquo;let it go\u0026rdquo;\nif you cannot do that, then reciting \u0026ldquo;let it go\u0026rdquo; helps you to push away other wondering thoughts, especially those thoughts bothering you, and make yourself agitated.\nso relax, is very simple that really don\u0026rsquo;t need you to do anything, yet very difficult, if you try to grab something.","title":"How to truly relax yourself"}]